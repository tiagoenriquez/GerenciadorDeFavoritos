/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import shared.Global;
import java.util.List;
import models.Favorito;
import services.FavoritoService;
import tableModels.FavoritoTableModel;

/**
 *
 * @author Tiago Enriquez Tachy
 */
public final class Principal extends javax.swing.JFrame {

    private FavoritoService favoritoService;
    private FavoritoTableModel favoritoTableModel;
    private List<Favorito> favoritos;
    private boolean insercaoAberta = false;
    private boolean alteracaoAberta = false;
    private boolean remocaoAberta = false;
    private boolean alteracaoAssuntoAberta = false;
    private boolean remocaoAssuntoAberta = false;

    /**
     * Creates new form Principal
     */
    public Principal() {
        try {
            initComponents();
            this.logo();
            setLocationRelativeTo(this);
            preencherListas();
        } catch (Exception exception) {
            new Erro("Erro na inicialização da tela\n" + exception.getMessage()).setVisible(true);
        }
    }

    /**
     * Preenche o combobox com os assuntos e a tabela com os favoritos.
     */
    public void preencherListas(){
        try {
            favoritoService = new FavoritoService();
            preencherAssuntos();
            favoritos = favoritoService.favoritos("");
            preencherFavoritos();
        } catch (Exception exception) {
            new Erro("Erro ao preencher as listas\n" + exception.getMessage()).setVisible(true);
        }
    }

    /**
     * Preenche o combo box com os assuntos dos favoritos.
     */
    private void preencherAssuntos() throws Exception {
        try {
            comboBoxAssuntos.addItem("-");
            comboBoxAssuntos.setSelectedIndex(0);
            int tamanho = comboBoxAssuntos.getItemCount();
            for (int i = 1; i < tamanho; i++) comboBoxAssuntos.removeItemAt(1);
            List<String> assuntos = favoritoService.assuntos();
            assuntos.forEach((assunto) -> comboBoxAssuntos.addItem(assunto));
        } catch (Exception exception) {
            throw new Exception("Erro ao mostrar dados na tabela.\n" + exception.getMessage());
        }
    }

    /**
     * Preenche a tabelas com os favoritos.
     */
    private void preencherFavoritos() throws Exception {
        try {
            favoritoTableModel = new FavoritoTableModel();
            tableFavoritos.setModel(favoritoTableModel);
            favoritoTableModel.setFavoritos(favoritos);
            tableFavoritos.revalidate();
        } catch (Exception e) {
            throw new Exception("Erro ao mostrar dados na tabela.\n" + e.getMessage());
        }
    }
    
    /**
     * Obtem o favorito selecionado na tabela.
     * @return 
     */
    private Favorito favorito() {
        int linha = tableFavoritos.getSelectedRow();
        for (Favorito favorito : favoritos) {
            if (favorito.getNome().equals(tableFavoritos.getValueAt(linha, 0).toString())) {
                return favorito;
            }
        }
        return null;
    }

    /**
     * Informa fechamento da tela de inserção.
     */
    public void fecharInsercao() {
        insercaoAberta = false;
    }

    /**
     * Informa fechamento da tela de alteração.
     */
    public void fecharAlteracao() {
        alteracaoAberta = false;
    }

    /**
     * Informa fechamento da tela de remoção.
     */
    public void fecharRemocao() {
        remocaoAberta = false;
    }

    /**
     * Informa fechamento da tela de alteração de assunto.
     */
    public void fecharAlteracaoAssunto() {
        alteracaoAssuntoAberta = false;
    }

    /**
     * Informa fechamento da tela de remoção de assunto.
     */
    public void fecharRemocaoAssunto() {
        remocaoAssuntoAberta = false;
    }
    
    /**
     * Mostra logotipo.
     */
    private void logo() {
        try {
            new Global().logo(this);
        } catch (Exception exception) {
            new Erro("Erro ao mostrar o logotipo").setVisible(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        buttonInserir = new javax.swing.JButton();
        buttonAlterar = new javax.swing.JButton();
        buttonDeletar = new javax.swing.JButton();
        comboBoxAssuntos = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableFavoritos = new javax.swing.JTable();
        buttonAlterarAssunto = new javax.swing.JButton();
        buttonDeletarAssunto = new javax.swing.JButton();
        buttonIrAoSite = new javax.swing.JButton();
        buttonPesquisar = new javax.swing.JButton();
        textFieldPesquisa = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gerenciador de Favoritos");
        setPreferredSize(new java.awt.Dimension(790, 350));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(760, 330));

        buttonInserir.setBackground(new java.awt.Color(0, 0, 0));
        buttonInserir.setForeground(new java.awt.Color(255, 255, 0));
        buttonInserir.setText("Inserir");
        buttonInserir.setPreferredSize(new java.awt.Dimension(130, 30));
        buttonInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserir(evt);
            }
        });

        buttonAlterar.setBackground(new java.awt.Color(0, 0, 0));
        buttonAlterar.setForeground(new java.awt.Color(255, 255, 0));
        buttonAlterar.setText("Alterar");
        buttonAlterar.setPreferredSize(new java.awt.Dimension(130, 30));
        buttonAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Alterar(evt);
            }
        });

        buttonDeletar.setBackground(new java.awt.Color(0, 0, 0));
        buttonDeletar.setForeground(new java.awt.Color(255, 255, 0));
        buttonDeletar.setText("Deletar");
        buttonDeletar.setPreferredSize(new java.awt.Dimension(130, 30));
        buttonDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletar(evt);
            }
        });

        comboBoxAssuntos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        comboBoxAssuntos.setPreferredSize(new java.awt.Dimension(31, 30));
        comboBoxAssuntos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                preencherFavoritos(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 0));

        tableFavoritos.setBackground(new java.awt.Color(255, 255, 0));
        tableFavoritos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nome", "URL"
            }
        ));
        jScrollPane1.setViewportView(tableFavoritos);

        buttonAlterarAssunto.setBackground(new java.awt.Color(0, 0, 0));
        buttonAlterarAssunto.setForeground(new java.awt.Color(255, 255, 0));
        buttonAlterarAssunto.setText("Alterar Assunto");
        buttonAlterarAssunto.setPreferredSize(new java.awt.Dimension(130, 30));
        buttonAlterarAssunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarAssunto(evt);
            }
        });

        buttonDeletarAssunto.setBackground(new java.awt.Color(0, 0, 0));
        buttonDeletarAssunto.setForeground(new java.awt.Color(255, 255, 0));
        buttonDeletarAssunto.setText("Deletar Assunto");
        buttonDeletarAssunto.setPreferredSize(new java.awt.Dimension(130, 30));
        buttonDeletarAssunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletarAssunto(evt);
            }
        });

        buttonIrAoSite.setBackground(new java.awt.Color(0, 0, 0));
        buttonIrAoSite.setForeground(new java.awt.Color(255, 255, 0));
        buttonIrAoSite.setText("Ir ao site");
        buttonIrAoSite.setPreferredSize(new java.awt.Dimension(130, 30));
        buttonIrAoSite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                irAoSite(evt);
            }
        });

        buttonPesquisar.setBackground(new java.awt.Color(0, 0, 0));
        buttonPesquisar.setForeground(new java.awt.Color(255, 255, 0));
        buttonPesquisar.setText("Pesquisar no site");
        buttonPesquisar.setPreferredSize(new java.awt.Dimension(130, 30));
        buttonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisa(evt);
            }
        });

        textFieldPesquisa.setPreferredSize(new java.awt.Dimension(70, 30));

        jLabel1.setForeground(new java.awt.Color(255, 255, 0));
        jLabel1.setText("Assunto");
        jLabel1.setPreferredSize(new java.awt.Dimension(50, 30));
        jLabel1.setRequestFocusEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonIrAoSite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(textFieldPesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonInserir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(buttonAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(buttonDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(buttonAlterarAssunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(buttonDeletarAssunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(comboBoxAssuntos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonInserir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAlterarAssunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonDeletarAssunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonIrAoSite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(textFieldPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxAssuntos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        desktopPane.add(jPanel1);
        jPanel1.setBounds(0, 0, 790, 330);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Preenche a tabela com os favoritos do assunto selecionado.
     *
     * @param evt
     */
    private void preencherFavoritos(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_preencherFavoritos
        try {
            String assunto = comboBoxAssuntos.getSelectedItem().toString();
            favoritos = favoritoService.favoritos(assunto);
            preencherFavoritos();
        } catch (Exception exception) {
            new Erro("Erro na listagem dos favoritos\n" + exception.getMessage()).setVisible(true);
        }
    }//GEN-LAST:event_preencherFavoritos

    /**
     * Abre a tela para inclusão de um favorito.
     * @param evt 
     */
    private void inserir(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserir
        if (!insercaoAberta) {
            insercaoAberta = true;
            new Insercao(this).setVisible(true);
        }
    }//GEN-LAST:event_inserir

    /**
     * Abre a tela de atualização de favorito.
     * @param evt 
     */
    private void Alterar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Alterar
        try {
            if (!alteracaoAberta) {
                alteracaoAberta = true;
                new Atualizacao(this, favorito()).setVisible(true);
            }
        } catch (Exception e) {
            new Erro("Não é possível alterar dados de favorito nas condições atuais.\n" + e.getMessage()).setVisible(true);
        }
    }//GEN-LAST:event_Alterar

    /**
     * Abre tela de remoção de favorito.
     * @param evt 
     */
    private void deletar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletar
        try {
            if (!remocaoAberta) {
                
                remocaoAberta = true;
                new Remocao(this, favorito()).setVisible(true);
            }
        } catch (Exception e) {
            new Erro("Não é possível deletar favoritos nas condições atuais.\n" + e.getMessage()).setVisible(true);
        }
    }//GEN-LAST:event_deletar

    /**
     * Abre a tela de alteração de assunto.
     * @param evt 
     */
    private void alterarAssunto(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarAssunto
        try {
            if (!alteracaoAssuntoAberta) {
                String assunto = comboBoxAssuntos.getSelectedItem().toString();
                alteracaoAssuntoAberta = true;
                new AlteracaoAssunto(this, assunto).setVisible(true);
            }
        } catch (Exception e) {
            new Erro("Não é possível alterar o assuntos nas condições atuais.\n" + e.getMessage()).setVisible(true);
        }
    }//GEN-LAST:event_alterarAssunto

    /**
     * Abre a tela de remoção de assunto.
     * @param evt 
     */
    private void deletarAssunto(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletarAssunto
        try {
            if (!remocaoAssuntoAberta) {
                String assunto = comboBoxAssuntos.getSelectedItem().toString();
                remocaoAssuntoAberta = true;
                new RemocaoAssunto(this, assunto).setVisible(true);
            }
        } catch (Exception e) {
            new Erro("Não é possível remover assunto nas condições atuais.\n" + e.getMessage()).setVisible(true);
        }
    }//GEN-LAST:event_deletarAssunto

    /**
     * Abre o site selecionado.
     * @param evt 
     */
    private void irAoSite(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_irAoSite
        try {
            favoritoService.abrirSite(favorito().getUrl());
        } catch (Exception e) {
            new Erro("Erro ao abrir o site\n" + e.getMessage()).setVisible(true);
        }
    }//GEN-LAST:event_irAoSite

    /**
     * Faz pesquisa de um conteúdo em determinado site.
     * @param evt 
     */
    private void pesquisa(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisa
        try {
            String pesquisa = textFieldPesquisa.getText();
            switch (favorito().getNome()) {
                case "Google":
                    favoritoService.pesquisarGoogle(pesquisa);
                    break;
                case "Youtube":
                    favoritoService.pesquisarYoutube(pesquisa);
                    break;
                default:
                    favoritoService.pesquisar(pesquisa, favorito().getUrl());
            }
        } catch (Exception exception) {
            new Erro("Erro ao fazer a pesquisa\n" + exception.getMessage()).setVisible(true);
        }
    }//GEN-LAST:event_pesquisa

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAlterar;
    private javax.swing.JButton buttonAlterarAssunto;
    private javax.swing.JButton buttonDeletar;
    private javax.swing.JButton buttonDeletarAssunto;
    private javax.swing.JButton buttonInserir;
    private javax.swing.JButton buttonIrAoSite;
    private javax.swing.JButton buttonPesquisar;
    private javax.swing.JComboBox<String> comboBoxAssuntos;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableFavoritos;
    private javax.swing.JTextField textFieldPesquisa;
    // End of variables declaration//GEN-END:variables

}
